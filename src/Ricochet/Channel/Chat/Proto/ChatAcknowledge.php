<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: Chat.proto
//   Date: 2016-08-04 01:45:57

namespace Ricochet\Channel\Chat\Proto {

  class ChatAcknowledge extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $message_id = null;
    
    /**  @var boolean */
    public $accepted = true;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ricochet.Channel.Chat.ChatAcknowledge');

      // OPTIONAL UINT32 message_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL accepted = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "accepted";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <message_id> has a value
     *
     * @return boolean
     */
    public function hasMessageId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message_id> value
     *
     * @return \Ricochet\Channel\Chat\Proto\ChatAcknowledge
     */
    public function clearMessageId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message_id> value
     *
     * @return int
     */
    public function getMessageId(){
      return $this->_get(1);
    }
    
    /**
     * Set <message_id> value
     *
     * @param int $value
     * @return \Ricochet\Channel\Chat\Proto\ChatAcknowledge
     */
    public function setMessageId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <accepted> has a value
     *
     * @return boolean
     */
    public function hasAccepted(){
      return $this->_has(2);
    }
    
    /**
     * Clear <accepted> value
     *
     * @return \Ricochet\Channel\Chat\Proto\ChatAcknowledge
     */
    public function clearAccepted(){
      return $this->_clear(2);
    }
    
    /**
     * Get <accepted> value
     *
     * @return boolean
     */
    public function getAccepted(){
      return $this->_get(2);
    }
    
    /**
     * Set <accepted> value
     *
     * @param boolean $value
     * @return \Ricochet\Channel\Chat\Proto\ChatAcknowledge
     */
    public function setAccepted( $value){
      return $this->_set(2, $value);
    }
  }
}

