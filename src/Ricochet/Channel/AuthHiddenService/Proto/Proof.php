<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: AuthHiddenService.proto
//   Date: 2016-08-05 18:35:13

namespace Ricochet\Channel\AuthHiddenService\Proto {

  class Proof extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $public_key = null;
    
    /**  @var string */
    public $signature = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Ricochet.Channel.AuthHiddenService.Proof');

      // OPTIONAL BYTES public_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "public_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES signature = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "signature";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <public_key> has a value
     *
     * @return boolean
     */
    public function hasPublicKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <public_key> value
     *
     * @return \Ricochet\Channel\AuthHiddenService\Proto\Proof
     */
    public function clearPublicKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <public_key> value
     *
     * @return string
     */
    public function getPublicKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <public_key> value
     *
     * @param string $value
     * @return \Ricochet\Channel\AuthHiddenService\Proto\Proof
     */
    public function setPublicKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <signature> has a value
     *
     * @return boolean
     */
    public function hasSignature(){
      return $this->_has(2);
    }
    
    /**
     * Clear <signature> value
     *
     * @return \Ricochet\Channel\AuthHiddenService\Proto\Proof
     */
    public function clearSignature(){
      return $this->_clear(2);
    }
    
    /**
     * Get <signature> value
     *
     * @return string
     */
    public function getSignature(){
      return $this->_get(2);
    }
    
    /**
     * Set <signature> value
     *
     * @param string $value
     * @return \Ricochet\Channel\AuthHiddenService\Proto\Proof
     */
    public function setSignature( $value){
      return $this->_set(2, $value);
    }
  }
}

